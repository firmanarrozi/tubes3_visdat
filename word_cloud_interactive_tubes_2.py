# -*- coding: utf-8 -*-
"""Word Cloud Interactive - Tubes_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eoWsgtJBL7Qj9CRbKDx4VNB7Cb0Yr42x
"""

# loading all necessary libraries
import numpy as np
import pandas as pd

from bokeh.io import output_file,show,output_notebook,push_notebook
from bokeh.io import curdoc, show
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource,HoverTool, Grid, LinearAxis, CategoricalColorMapper, Plot, VBar
from bokeh.layouts import row,column,gridplot
from bokeh.models.widgets import Tabs,Panel
from bokeh.models import HoverTool, CDSView, GroupFilter

import plotly.graph_objs as go
from plotly import tools

from PIL import Image
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import re

import matplotlib.pyplot as plt

output_notebook()

#read dataset
df = pd.read_csv("data/winemag-data-130k-v2.csv", index_col=0)

df.head()

"""# Data Processing"""

negara = df.loc[df['variety'] == 'White Blend']

df.info()

df[["country", "description","points"]].head()

percent_missing = df.isnull().sum() * 100 / len(df)

print(percent_missing)

df_new = df.fillna(0)

missing_val = df_new.isnull().sum() * 100 / len(df_new)

print(missing_val)

# Groupby by country
country = df.groupby("country")

# Summary statistic of all countries
country.describe().head()

# top 5 highest average points of all 44 countries
country.mean().sort_values(by="points",ascending=False).head()

df_top = country.mean().sort_values(by="points",ascending=False).head(10)
df_top5 = country.mean().sort_values(by="points",ascending=False).head(5)

plt.figure(figsize=(15,7))
country.size().sort_values(ascending=False).plot.bar()
plt.xticks(rotation=50)
plt.xlabel("Country of Origin")
plt.ylabel("Number of Reviews")
plt.show()

"""## Interactive Visual with Plotly - 1"""

# prepare data for top 10 country
# df_top
# # create trace1 
# trace1 = go.Bar(
#                 x = df_top.index,
#                 y = df_top.points,
#                 name = "Points",
#                 marker = dict(color = 'rgba(255, 174, 255, 0.5)',
#                              line=dict(color='rgb(0,0,0)',width=1.5)),
#                 text = df_top.index)
# # create trace2 
# trace2 = go.Bar(
#                 x = df_top.index,
#                 y = df_top.price,
#                 name = "Price",
#                 marker = dict(color = 'rgba(255, 55, 128, 0.5)',
#                               line=dict(color='rgb(0,0,0)',width=1.5)),
#                 text = df_top.index)
# data = [trace1, trace2]
# layout = {
#   'xaxis': {'title': 'Top 10 Countries sort by Points'},
#   'barmode': 'group',
#   'title': 'Top 10 Country Wine Comparison of Points and Price Mean'
# }
# fig = go.Figure(data = data, layout = layout)
# # iplot(fig)
# fig.show()

"""## Interactive Visual with Bokeh - 2"""

p1 = figure(width=600, height=400, title="Distribution of Points")

# compute the histogram of the price variable 
hist, edges = np.histogram(df.points, density=True, bins=50)

tooltips1 = [
            ('Density','@top'),
           ]

# call the quad method on our figure object p
p1.quad(top=hist, color='purple', bottom=0, left=edges[:-1], right=edges[1:], line_color="white")

p1.add_tools(HoverTool(tooltips=tooltips1))

show(p1)

# Store the data in a ColumnDataSource
df_wine = ColumnDataSource(df)

# Specify the selection tools to be made available
select_tools = ['box_select', 'lasso_select', 'poly_select', 'tap', 'reset']

p2 = figure(plot_height=400,
             x_axis_label='Point of Review',
             y_axis_label='Price of Wine',
             title='Points vs. Price of Wine',
             toolbar_location='below',
             tools=select_tools)

# add a circle renderer with a size, color, and alpha
p2.circle(x='points', y='price', source=df_wine, 
          alpha=0.2, size=5,
          selection_color='deepskyblue',
          nonselection_color='navy',
          nonselection_alpha=0.3)

# Format the tooltip
tooltips = [
            ('Country','@country'),
            ('Variety', '@variety'),
            ('Winery', '@winery'),
            ('Price', '@price'),
            ('Point', '@points'),
           ]

# Add the HoverTool to the figure
p2.add_tools(HoverTool(tooltips=tooltips))

# show the results
show(p2, notebook_handle=True)

"""## Interactive Visual with Plotly - 1
### Plot of all 44 countries by its highest rated wine
"""

# prepare data highest point
#df_highest = country.max().sort_values(by="points",ascending=False)["points"]
df_highest = country.points.max().sort_values(ascending=False)
# create trace1 
trace1 = go.Bar(
                x = df_highest.index,
                y = df_highest,
                name = "Points",
                marker = dict(color = 'rgba(255, 174, 255, 0.5)',
                             line=dict(color='rgb(0,0,0)',width=1.5)),
                text = df_highest.index)
# create trace2 
data = [trace1]
layout = {
  'xaxis': {'title': 'Countries'},
  'barmode': 'group',
  'title': 'Highest Points Given from All Countries'
}
fig = go.Figure(data = data, layout = layout)
fig.show()

"""# Text Analysis"""

import re
import itertools
from collections import Counter

# Join all reviews of each country:
usa = " ".join(review for review in df[df["country"]=="US"].description)
fra = " ".join(review for review in df[df["country"]=="France"].description)
ita = " ".join(review for review in df[df["country"]=="Italy"].description)

usa_words = re.findall(r'\w+', usa)
fra_words = re.findall(r'\w+', fra)
ita_words = re.findall(r'\w+', ita)


# cap_words = [word.upper() for word in words]
usa_lowcase = [word.lower() for word in usa_words]
fra_lowcase = [word.lower() for word in fra_words]
ita_lowcase = [word.lower() for word in ita_words]

# set(lower_case)

all_word_usa = list(itertools.chain(usa_lowcase))
all_word_fra = list(itertools.chain(fra_lowcase))
all_word_ita = list(itertools.chain(ita_lowcase))

# Create counter
counts_usa = Counter(all_word_usa)
counts_fra = Counter(all_word_fra)
counts_ita = Counter(all_word_ita)

counts_word_usa = pd.DataFrame(counts_usa.most_common(25),columns=['words', 'count'])
counts_word_fra = pd.DataFrame(counts_fra.most_common(25),columns=['words', 'count'])
counts_word_ita = pd.DataFrame(counts_ita.most_common(25),columns=['words', 'count'])

source_usa = ColumnDataSource(counts_word_usa)
source_fra = ColumnDataSource(counts_word_fra)
source_ita = ColumnDataSource(counts_word_ita)

# Create a figure with a datetime type x-axis
usa_fig = figure(plot_height=400,
             x_axis_label='Words', y_axis_label='Words Total',
             x_minor_ticks=2)

fra_fig = figure(plot_height=400,
             x_axis_label='Words', y_axis_label='Words Total',
             x_minor_ticks=2)

ita_fig = figure(plot_height=400,
             x_axis_label='Words', y_axis_label='Words Total',
             x_minor_ticks=2)

tooltips_usa = [
            ('Count','@count'),
            ('Word','@words'),
           ]
tooltips_fra = [
            ('Count','@count'),
            ('Word','@words'),
           ]
tooltips_ita = [
            ('Count','@count'),
            ('Word','@words'),
           ]

# The daily words will be represented as vertical bars (columns)
usa_fig.vbar(x='index', bottom=0, top='count', 
         color='blue', width=0.75, source=source_usa,
         legend_label='Count')

fra_fig.vbar(x='index', bottom=0, top='count', 
         color='blue', width=0.75, source=source_fra,
         legend_label='Count')

ita_fig.vbar(x='index', bottom=0, top='count', 
         color='blue', width=0.75, source=source_ita,
         legend_label='Count')


usa_fig.add_tools(HoverTool(tooltips=tooltips_usa))
fra_fig.add_tools(HoverTool(tooltips=tooltips_fra))
ita_fig.add_tools(HoverTool(tooltips=tooltips_ita))

# Put the legend in the upper left corner
usa_fig.legend.location = 'top_left'
fra_fig.legend.location = 'top_left'
ita_fig.legend.location = 'top_left'

# Let's check it out
# show(usa_fig)

# Reduce the width of both figures
usa_fig.plot_width = fra_fig.plot_width = ita_fig.plot_width = 800

# Edit the titles
usa_fig.title.text = 'Most Frequent Words Found in USA Review'
fra_fig.title.text = 'Most Frequent Words Found in France Review'
ita_fig.title.text = 'Most Frequent Words Found in Italy Review'

# Configure the gridplot
usa_fra_ita_gridplot = gridplot([[usa_fig, fra_fig, ita_fig]], 
                              toolbar_location='right')

# Create two panels, one for each conference
usa_panel = Panel(child=usa_fig, title='USA')
fra_panel = Panel(child=fra_fig, title='France')
ita_panel = Panel(child=ita_fig, title='Italy')

# Assign the panels to Tabs
tabs = Tabs(tabs=[usa_panel, fra_panel,ita_panel])

# Plot the two visualizations in a horizontal configuration
show(tabs)

"""# Set up basic WordCloud"""

text = df.description[0]

# Create and generate a word cloud image:
wordcloud = WordCloud(max_font_size=50, max_words=100, background_color="white").generate(text)

# Display the generated image:
plt.figure()
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""### Saving WordCloud -- optional
### wordcloud.to_file("img/first_review.png"
"""

text = " ".join(review for review in df.description)
print ("There are {} words in the combination of all review.".format(len(text)))

"""### Create stopword list for more Word:"""

stopwords = set(STOPWORDS)
stopwords.update(["drink", "now", "wine", "flavor", "flavors"])

# Generate a word cloud image
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)

# Display the generated image:
# the matplotlib way:
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""# Advance WordCloud"""

wine_mask = np.array(Image.open("img/wine_bg.jpeg"))

#Add Custom Font
font_path = 'font/Nadia Sofia.ttf'
# Add Custom Mask
#Keep in mind the background of the image used must be white, otherwise, 
#the system will consider the background as an object.

wc = WordCloud(stopwords=stopwords, font_path = font_path,
               mask=wine_mask, background_color="white",
               max_words=1000, max_font_size=256,
               random_state=42, width=wine_mask.shape[1],
               height=wine_mask.shape[0], contour_color='firebrick')

# # Generate a wordcloud
wc.generate(text)
# # show
plt.figure(figsize=[20,10])
plt.imshow(wc, interpolation='bilinear')
plt.axis("off")
plt.show()

title ="Highly Rated Comments"

country.size().sort_values(ascending=False).head(3)

"""## USA Flag"""

usa_mask = np.array(Image.open("img/usa-flag.png"))

wordcloud_usa = WordCloud(stopwords=stopwords, background_color="white", mode="RGBA", max_words=1000, mask=usa_mask).generate(usa)

wordcloud_usa.generate(usa)
# create coloring from image
image_colors = ImageColorGenerator(usa_mask)
plt.figure(figsize=[7,7])
plt.imshow(wordcloud_usa.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")

# store to file
# plt.savefig("img/us_wine.png", format="png")

plt.show()

"""## France Flag"""

# Generate a word cloud image
mask_fra = np.array(Image.open("img/france-flag.jpeg"))
wordcloud_fra = WordCloud(stopwords=stopwords, background_color="white", mode="RGBA", max_words=1000, mask=mask_fra).generate(fra)

# create coloring from image
image_colors_fra = ImageColorGenerator(mask_fra)
plt.figure(figsize=[7,7])
plt.imshow(wordcloud_fra.recolor(color_func=image_colors_fra), interpolation="bilinear")
plt.axis("off")

# store to file
# plt.savefig("img/fra_wine.png", format="png")

plt.show()

"""## Italy Flag"""

mask_ita = np.array(Image.open("img/italy.png"))
wordcloud_ita = WordCloud(stopwords=stopwords, background_color="white", mode="RGBA", max_words=1000, mask=mask_ita).generate(ita)

# create coloring from image
image_colors_ita = ImageColorGenerator(mask_ita)
plt.figure(figsize=[7,7])
plt.imshow(wordcloud_ita.recolor(color_func=image_colors_ita), interpolation="bilinear")
plt.axis("off")

# store to file
# plt.savefig("img/ita_wine.png", format="png")

plt.show()



